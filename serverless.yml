service: aws-js-practitioner
frameworkVersion: "3"
configValidationMode: error
useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x

plugins:
  - serverless-s3-sync
  - serverless-cloudfront-invalidate
  - log-output-values

custom:
  vars:
    bucketName: ${self:service}-${sls:stage}
    domainName: ${self:service}-${sls:stage}.${env:HOSTED_ZONE_DOMAIN}
  log-output-values:
    - template:
        "Web App deployed to Cloudfront and available at following addresses:\n
        * https://{WebAppDistributionOutput}\n
        * https://{WebAppCustomDomainOutput}"
  s3Sync:
    - bucketName: ${self:custom.vars.bucketName}
      localDir: dist
      deleteRemoved: true
  cloudfrontInvalidate:
    - distributionIdKey: "WebAppDistributionIdOutput"
      autoInvalidate: true
      items:
        - "/index.html"

resources:
  Resources:
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.vars.bucketName}
    CloudFrontOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Description: Default Origin Access Control
          Name: CloudFrontOriginAccessControl
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: "AllowCloudFrontServicePrincipalReadOnly"
              Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: s3:GetObject
              Resource: !Sub ${WebAppS3Bucket.Arn}/*
              Condition:
                StringEquals:
                  AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebAppDistribution}

    WebAppDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt WebAppS3Bucket.RegionalDomainName
              Id: WebAppS3BucketOrigin
              S3OriginConfig:
                OriginAccessIdentity: ""
              OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
          Enabled: true
          IPV6Enabled: true
          HttpVersion: http2
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods: ["GET", "HEAD", "OPTIONS"]
            CachedMethods: ["GET", "HEAD", "OPTIONS"]
            ForwardedValues:
              Headers:
                - Access-Control-Request-Headers
                - Access-Control-Request-Method
                - Origin
                - Authorization
              QueryString: false
              Cookies:
                Forward: none
            TargetOriginId: WebAppS3BucketOrigin
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            DefaultTTL: 0
          Aliases:
            - ${self:custom.vars.domainName}
          ViewerCertificate:
            AcmCertificateArn: ${env:HOSTED_ZONE_CERTIFICATE_ARN}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
    Route53Record:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: ${env:HOSTED_ZONE_DOMAIN}.
        Name: ${self:custom.vars.domainName}.
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt WebAppDistribution.DomainName
          EvaluateTargetHealth: false

  Outputs:
    WebAppS3BucketOutput:
      Value: !Ref WebAppS3Bucket
    WebAppDistributionOutput:
      Value: !GetAtt WebAppDistribution.DomainName
    WebAppDistributionIdOutput:
      Value: !Ref WebAppDistribution
    WebAppCustomDomainOutput:
      Value: ${self:custom.vars.domainName}
